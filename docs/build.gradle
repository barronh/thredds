import edu.ucar.build.publishing.DeleteFromNexusTask
import edu.ucar.build.publishing.PublishToRawRepoTask

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

task publish(type: PublishToRawRepoTask) {
    host = "https://artifacts.unidata.ucar.edu/"
    repoName = "thredds-doc"

    srcFile = file('website/')
    destPath = version
    
    // Disable this task until new thredds docs are ready to go.
    enabled = false
}

// By default, this will perform a dry run, which simply prints the components that the query matched.
// To actually delete those components, do:  ./gradlew :docs:deleteFromNexus --dryRun=false
task deleteFromNexus(type: DeleteFromNexusTask) {
    host = "https://artifacts.unidata.ucar.edu/"
    searchQueryParameters.repository = 'thredds-doc'
    searchQueryParameters.q = '*'  // Nuke everything in the repo.
}

// The above tasks require credentials for our Nexus server, which they look for in Gradle properties.
// If those properties (i.e. NEXUS_USERNAME_KEY and NEXUS_PASSWORD_KEY) haven't been provided, the build will fail.
// Therefore, we only want to configure the credentials when one of the above tasks is part of the execution plan.
// Otherwise, unavailable credentials could cause a build to fail even if we aren't doing anything that interacts
// with Nexus. The TaskExecutionGraph allows us to do that.
gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    Collection<Task> nexusTasks = taskGraph.allTasks.findAll {
        it instanceof PublishToRawRepoTask || it instanceof DeleteFromNexusTask }
    
    nexusTasks.each {
        it.username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        it.password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    }
}
